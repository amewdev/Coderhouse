<header>
    <div>
        {{#if data.hasPrevPage}}
        <a
            href="/products?page={{data.prevPage}}&limit={{data.limit}}&sort={{query.sort}}&category={{query.category}}&status={{query.status}}">←</a>
        {{/if}}
        <p>
            Page {{data.page}} / {{data.totalPages}}
        </p>
        {{#if data.hasNextPage}}
        <a
            href="/products?page={{data.nextPage}}&limit={{data.limit}}&sort={{query.sort}}&category={{query.category}}&status={{query.status}}">→</a>
        {{/if}}
    </div>

    <div>
        <h1>Products</h1>
        <p>
            ({{data.totalDocs}} docs)
        </p>
    </div>

    <div>
        <label for="cart-select">Add to cart</label>
        <select id="cart-select">
            <!--OPTIONS loaded with sockets-->
        </select>
    </div>
</header>

<section id="controls">
    <div>
        <a
            href="/products?page={{data.page}}&limit={{data.limit}}&sort=asc&category={{query.category}}&status={{query.status}}">Biggest
            price last</a>
        <a
            href="/products?page={{data.page}}&limit={{data.limit}}&sort=desc&category={{query.category}}&status={{query.status}}">Biggest
            price first</a>
        <a
            href="/products?page={{data.page}}&limit={{data.limit}}&sort=&category={{query.category}}&status={{query.status}}">Restore
            order</a>
    </div>

    <div>
        <label for="status-select">Filter by status:</label>
        <select id="status-select" onchange="filterByStatusAndCategory()">
            <option value="">All Status</option>
            <option value="true">Available</option>
            <option value="false">Unavailable</option>
        </select>
    </div>
    <div>
        <label for="category-select">Filter by category:</label>
        <select id="category-select" onchange="filterByStatusAndCategory()">
            <!--OPTIONS loaded with sockets-->
        </select>
    </div>

</section>

<section id="products_charts">
    <table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Category</th>
                <th>Add to cart</th>
            </tr>
        </thead>

        <tbody id="tbody">
            <!--TRs laoded with sockets-->
        </tbody>
    </table>
</section>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const pid = "{{ pid }}";

    socket.emit("getCarts");
    socket.on("socketCarts", (carts) => {
        const cartSelect = document.getElementById("cart-select");
        cartSelect.innerHTML = "";

        carts.forEach((cart) => {
            const option = document.createElement("option");
            option.value = cart;
            option.textContent = cart;
            cartSelect.appendChild(option);
        });
    });

    socket.emit("getCategories");
    socket.on("socketCategories", (data) => {
        const categorySelect = document.getElementById("category-select");
        categorySelect.innerHTML = "";
        const categories = data.categories;

        const option = document.createElement("option");
        option.textContent = "All categories";
        option.value = "";
        categorySelect.appendChild(option);

        categories.forEach((category) => {
            const option = document.createElement("option");
            option.textContent = category;
            option.value = category;
            categorySelect.appendChild(option);
        });
    });

    socket.emit("getProducts", {
        page: "{{query.page}}",
        limit: "{{query.limit}}",
        sort: "{{query.sort}}",
        category: "{{query.category}}",
        status: "{{query.status}}"
    });

    socket.on("socketProducts", (data) => {
        const products = data.products.docs;
        const tbody = document.getElementById("tbody");
        tbody.innerHTML = "";
        products.forEach((product) => {
            const tr = document.createElement("tr");

            const td1 = document.createElement("td");
            td1.textContent = product.title;
            if (!product.status) td1.style.textDecoration = "line-through";
            tr.appendChild(td1);

            const td2 = document.createElement("td");
            td2.textContent = product.price;
            if (!product.status) td2.style.textDecoration = "line-through";
            tr.appendChild(td2);

            const td3 = document.createElement("td");
            if (product.status) td3.textContent = product.stock;
            tr.appendChild(td3);

            const td4 = document.createElement("td");
            if (product.status) td4.textContent = product.category;
            tr.appendChild(td4);

            const td5 = document.createElement("td");
            if (product.status) td5.textContent = "Add to cart";
            if (product.status) td5.onclick = () => postProductToCart(product._id);
            tr.appendChild(td5);

            tbody.appendChild(tr);
        })
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Restore selected category and status from query parameters
        const category = "{{ query.category }}";
        const status = "{{ query.status }}";
        if (category) document.getElementById("category-select").value = category;
        if (status) document.getElementById("status-select").value = status;
    });

    function filterByStatusAndCategory() {
        const selectedStatus = document.getElementById("status-select").value;
        const selectedCategory = document.getElementById("category-select").value;
        let url = "/products?page={{ data.page }}&limit={{ data.limit }}&sort={{ query.sort }}";

        if (selectedStatus !== "") url += "&status=" + selectedStatus;
        if (selectedCategory) url += "&category=" + selectedCategory;

        window.location.href = url;
    }

    function goToProductPage(pid) {
        window.location.href = `/products/${pid}`;
    }

    function postProductToCart(productId) {
        const cartId = document.getElementById("cart-select").value.trim();
        fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                product: productId,
                quantity: 1,
            }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                socket.emit("getProducts", {
                    page: "{{query.page}}",
                    limit: "{{query.limit}}",
                    sort: "{{query.sort}}",
                    category: "{{query.category}}",
                    status: "{{query.status}}"
                });
            })
            .catch((error) => {
                console.error(error);
            });
    }
</script>